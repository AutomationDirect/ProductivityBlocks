bc.start=start
bg.repeat_control=Repeat for Range
bg.repeat_control.description=Repeat the commands with "Index" ranging between "Start" and "Stop" values. "Index" changes by "Increment" after each repetition.
bc.end=stop
bc.step=step
bg.constrain=constrain
bc.low=lower
bc.high=higher
bg.sd_write=Append to SD
bg.sd_write.description=Append data to a file on an external SD card
bg.sd_read=Read from SD
bg.sd_read.description=Seek to the desired position in a file on an external SD card and read out a string of desired length.
bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=read 'byte' EEPROM
bg.eeprom_write=write 'byte' EEPROM
bg.eeprom_read_int=read number from EEPROM
bg.eeprom_write_int=write number to EEPROM
bg.eeprom_read_long=read 'long' from EEPROM
bg.eeprom_write_long=write 'long' to EEPROM
bc.device_address=device address
bc.device_address_I2C=address 0x
bc.register_address=register address
bc.watchdog_enable=enable
bc.eeprom_address=address
bc.eeprom_data=data
bc.ln=new line
bc.message=message
bc.print=print
bc.line_number=line#
bc.row_number=row#
bc.character_number=char#
bg.MaSD_file=SD File
bc.File=File
bg.MaSD_Write=SD Write
bg.MaSD_NewLine=SD New Line
bg.MaSD_Connect=SD Connect
bg.MaSD_separator=SD Separator
bc.space=Space
bc.tab=Tabulation
bd.program=Program

bg.random_range.description=return a random number within specified range.
bg.variable_poly=Character_Variable
bg.setter_variable_char=Set Character
bg.char=A
bd.chars= Chars Test
bg.not_equal_poly= !=
bg.equal_string= ==
bg.not_equal_string= !=
bg.equal_poly= ==
bg.glue_poly=glue
bg.serial_read_poly=serial read
bg.serial_parseInt=serial parseInt
bg.serial_available=serial data available
bg.serial_available2=serial data available
bg.program=Program
bg.program_full=raw code program
bc.setup=setup
bc.loop=loop
bg.setup=setup
bc.par=input
bc.vecsize=size
bc.num=#
bg.variable_fake=Table
bg.fake=fake
bg.variable_vector=Table
bc.position=position
bg.create_variable_vector=create an array
bg.setter_variable_vector=set an array member
bg.string_greater= >
bg.string_less= <
bg.string_equal= ==
bg.string_greater_equal= >=
bg.string_less_equal= <=
bg.string_not_equal= !=
bg.string_equals= equals
bg.string_equalsIgnoreCase=equalsIgnoreCase
bg.string_toInt=toInt
bg.string_compareTo=compareTo
bg.string_add=+
bg.string_add.description=Concatenate two strings (variables or constants).

bg.setter_variable_String=Set String
bg.setter_variable_String.description=set String variable.
bg.variable_String=String_Variable
bg.variable_String.description=String variable.
bg.raw_code=C++ Code Block
bg.raw_code.description=Inject any raw code into editor.
bg.serial_read=serial read
bd.especial=Especial
bg.equal_digital===
bg.not_equal_digital=!=
bg.bitwise_and=&
bg.bitwise_or=|
bg.bitshift_left=<<
bg.bitshift_right=>>
bg.bitwise_and.description=Bitwise 'and' operator.
bg.bitwise_or.description=Bitwise 'or' operator.
bg.bitshift_left.description=Shift the bits of an integer to the left some number of times.
bg.bitshift_right.description=Shift the bits of an integer to the right some number of times.

bg.repeat=Repeat
bg.break=break
bc.var=iteration variable name
bg.glue_msg=glue

# BlockDrawer name
bc.angle=angle
bc.base=base
bc.condition=condition
bc.else=else
bc.exponent=exponent
bc.from=from
bc.level=level
bc.max=max
bc.min=min
bc.microseconds=microseconds
bc.milliseconds=milliseconds

# BlockConnector label
bc.pin_number=pin#
bc.status=status
bc.test=test
bc.then=then
bc.to=to
bc.value=value
bc.variable=variable
bc.index=index
bc.frequency=frequency
bc.do=loop
bc.device_address=device address
bc.register_address=register address
bc.watchdog_enable=Enable
bc.eeprom_address=address
bc.eeprom_data=data
bc.motor_channel=motor channel
bc.motor_speed=motor speed

bc.scoop_event_flag=Event

bd.control=Control
bd.number=Variables/Constants
bd.operators=Math
bd.pins=I/O

bd.communication=Communication
bd.storage=Removable Media
bg.abs=abs
bg.abs.description=Returns the absolute value of the input.
bg.addition=+
bg.and=and
bg.cos=cos
bg.cos.description=Returns the cosine of the input angle.
bg.compound_modulo=%=
bg.compound_modulo.description=x %= y; is equivalent to the expression x = x % y;
bg.compound_bitwise_and=&=
bg.compound_bitwise_and.description=x &= y; is equivalent to the expression x = x & y;
bg.compound_multiplication=*=
bg.compound_multiplication.description=x *= y; is equivalent to the expression x = x * y;
bg.compound_addition=+=
bg.compound_addition.description=x += y; is equivalent to the expression x = x + y;
bg.compound_subtraction=-=
bg.compound_subtraction.description=x -= y; is equivalent to the expression x = x - y;
bg.compound_division=/=
bg.compound_division.description=x /= y; is equivalent to the expression x = x / y;
bg.compound_bitwise_or=| =
bg.compound_bitwise_or.description=x |= y; is equivalent to the expression x = x | y;
bg.compound_bitwise_xor=^=
bg.compound_bitwise_xor.description=x ^= y; is equivalent to the expression x = x ^ y;


bg.scoop_task=SCoop Task
bg.scoop_loop=SCoop Loop
bg.scoop_sleep=SCoop Sleep
bg.scoop_pin_event=SCoop Event
bg.scoop_event_low=Event: LOW
bg.scoop_event_high=Event: HIGH
bg.scoop_event_falling=Event: FALLING
bg.scoop_event_rising=Event: RISING
bg.scoop_event_change=Event: CHANGE

bg.delay=Delay
bg.delay_microseconds=Delay Microseconds

bg.digital-high=HIGH
bg.digital-low=LOW
bg.digital-off=OFF
bg.digital-on=ON
bg.division=\u00f7
bg.equal===
bg.false=false
bg.glue_sb=glue
bg.glue_sn=glue
bg.dummy=dummy
bg.greater=>
bg.greater_equal=>=
bg.if=if
bg.ifelse=if/else
bg.less=<
bg.less_equal=<=
bg.loop=Loop
bg.subroutine=Subroutine
bg.subroutine-ref=Subroutine
bg.subroutine_var=subroutine with argument
bg.subroutine-ref_var=subroutine with argument
bg.ref_var=variable_transmitted
bc.transmit=transmit
bg.map=map
bg.map_common=map [0, 1023] to [0, 255]

bg.max=max
bg.max.description=Return the maximum of two numbers.
bg.message=String Constant
bg.millis=Runtime (ms)
bg.millis.description=Returns the number of milliseconds since last power-up or reset. Note: Use to set a 'Long Integer' variable.
bg.micros=Runtime (us)
bg.micros.description=Returns the number of microseconds since last power-up or reset. Note: Use to set a 'Long Integer' variable.
bg.min=min
bg.min.description=Return the minimum of two numbers.
bg.modulo=%
bg.multiplication=x
bg.not=not
bg.not_equal=!=
bg.char=A
bg.number=1
bg.number_long=1000000
bg.number_double=3.1415927
bg.number-single=1
bg.number-single-I2C-address=3F
bg.number-single-fixed-parallel=Parallel
bg.or=or
bg.pin-read-analog=Get Analog
bg.pin-read-digital=Get Point
bg.pin-read-digital-pullup=Get Point (Pullup)
bg.pin-write-analog=Set Analog
bg.pin-write-digital=Set Point
bg.pin-toggle=Toggle Digital
bg.pow=power
bg.pow.description=Returns the base raised to the power of the exponent.
bg.random=random
bg.repeat_times=Repeat

bg.sd_write_number=SD write number
bg.sd_write_number_int=SD write number Int
bg.sd_return=Return
bg.sd_no_return=No return
bg.eeprom_read=read byte from EEPROM
bg.eeprom_write=write byte to EEPROM
bg.random_range=random

bg.equal_digital===
bg.not_equal_digital=!=
bg.repeat=Repeat with Index
bg.glue_msg=String Constant

bg.setter_variable_digital=Set Boolean
bg.setter_variable_number=Set Integer
bg.setter_variable_number_unsigned_long=Set Long
bg.setter_variable_number_double=Set Double
bg.sin=sin
bg.sin.description=Returns the sine of the input angle.
bg.sqrt=sqrt
bg.sqrt.description=Returns the square root of the input.
bg.subtraction=-
bg.tan=tan
bg.tan.description=Returns the tangent of the input angle.
bg.true=true
bg.string_equal=equals
bg.string_empty=is empty

bg.variable_digital=Boolean_Variable
bg.variable_number=Integer_Variable
bg.variable_number_unsigned_long=Long_Variable
bg.variable_number_double=Double_Variable
bg.variable_string=string name
bg.while=while
bg.do_while=Do While
bg.wire_isread=read I2C ok?
bg.wire_read=read from I2C
bg.wire_write=write to I2C
bg.wire_write_one_byte=I2C write 1

# <!--****************** Analog DAC pins on all Arduino boards *************** -->
bg.pinListAnalog_A0=A0
bg.pinListAnalog_A1=A1
bg.pinListAnalog_A2=A2
bg.pinListAnalog_A3=A3
bg.pinListAnalog_A4=A4
bg.pinListAnalog_A5=A5
# <!--****************** Extra Analog DAC pins on Arduino Nano/Mega only *************** -->
bg.pinListAnalog_A6=A6 (Mega/Nano)
bg.pinListAnalog_A7=A7 (Mega/Nano)
bg.pinListAnalog_A8=A8 (Mega)
bg.pinListAnalog_A9=A9 (Mega)
bg.pinListAnalog_A10=A10 (Mega)
bg.pinListAnalog_A11=A11 (Mega)
bg.pinListAnalog_A12=A12 (Mega)
bg.pinListAnalog_A13=A13 (Mega)
bg.pinListAnalog_A14=A14 (Mega)
bg.pinListAnalog_A15=A15 (Mega)

bg.pinListDigital_D0=D0
bg.pinListDigital_D1=D1
bg.pinListDigital_D2=D2
bg.pinListDigital_D3=D3
bg.pinListDigital_D4=D4
bg.pinListDigital_D5=D5
bg.pinListDigital_D6=D6
bg.pinListDigital_D7=D7
bg.pinListDigital_D8=D8
bg.pinListDigital_D9=D9
bg.pinListDigital_D10=D10
bg.pinListDigital_D11=D11
bg.pinListDigital_D12=D12
bg.pinListDigital_D13=D13
# <!--** In fact the following 6 pins are available as digital on Arduino UNO, et al 		** -->
# <!--** but if used reduce the number of analog in's available and are best avoided. 		** -->
# <!--** On the UNO  pins A0 -  A5 map to D14 - D19 and can be referenced both ways. 		** -->
# <!--** NOTE ** -->
# <!--** On the MEGA pins A0 - A15 map to D54 - D69 and so code using the 'A(x)' 			** -->
# <!--** referencing can have unintended consequences when programmed to different boards. 	** -->
bg.pinListDigital_D14=D14 (Mega)
bg.pinListDigital_D15=D15 (Mega)
bg.pinListDigital_D16=D16 (Mega)
bg.pinListDigital_D17=D17 (Mega)
bg.pinListDigital_D18=D18 (Mega)
bg.pinListDigital_D19=D19 (Mega)
# <!--****************** Extra Digital pins on Arduino Mega only *************** -->
bg.pinListDigital_D20=D20 (Mega)
bg.pinListDigital_D21=D21 (Mega)
bg.pinListDigital_D22=D22 (Mega)
bg.pinListDigital_D23=D23 (Mega)
bg.pinListDigital_D24=D24 (Mega)
bg.pinListDigital_D25=D25 (Mega)
bg.pinListDigital_D26=D26 (Mega)
bg.pinListDigital_D27=D27 (Mega)
bg.pinListDigital_D28=D28 (Mega)
bg.pinListDigital_D29=D29 (Mega)
bg.pinListDigital_D30=D30 (Mega)
bg.pinListDigital_D31=D31 (Mega)
bg.pinListDigital_D32=D32 (Mega)
bg.pinListDigital_D33=D33 (Mega)
bg.pinListDigital_D34=D34 (Mega)
bg.pinListDigital_D35=D35 (Mega)
bg.pinListDigital_D36=D36 (Mega)
bg.pinListDigital_D37=D37 (Mega)
bg.pinListDigital_D38=D38 (Mega)
bg.pinListDigital_D39=D39 (Mega)
bg.pinListDigital_D40=D40 (Mega)
bg.pinListDigital_D41=D41 (Mega)
bg.pinListDigital_D42=D42 (Mega)
bg.pinListDigital_D43=D43 (Mega)
bg.pinListDigital_D44=D44 (Mega)
bg.pinListDigital_D45=D45 (Mega)
bg.pinListDigital_D46=D46 (Mega)
bg.pinListDigital_D47=D47 (Mega)
bg.pinListDigital_D48=D48 (Mega)
bg.pinListDigital_D49=D49 (Mega)
bg.pinListDigital_D50=D50 (Mega)
bg.pinListDigital_D51=D51 (Mega)
bg.pinListDigital_D52=D52 (Mega)
bg.pinListDigital_D53=D53 (Mega)
# <!--****************** 'Analog' PWM pins on All Arduino Boards *************** -->
bg.pinListAnalogWrite_D3=D3
bg.pinListAnalogWrite_D5=D5
bg.pinListAnalogWrite_D6=D6
bg.pinListAnalogWrite_D9=D9
bg.pinListAnalogWrite_D10=D10
bg.pinListAnalogWrite_D11=D11
# <!--****************** Extra 'Analog' PWM pins on Arduino Mega only *************** -->
bg.pinListAnalogWrite_D2=D2 (Mega)
bg.pinListAnalogWrite_D4=D4 (Mega)
bg.pinListAnalogWrite_D7=D7 (Mega)
bg.pinListAnalogWrite_D8=D8 (Mega)
bg.pinListAnalogWrite_D12=D12 (Mega)
bg.pinListAnalogWrite_D13=D13 (Mega)
bg.pinListAnalogWrite_D44=D44 (Mega)
bg.pinListAnalogWrite_D45=D45 (Mega)
bg.pinListAnalogWrite_D46=D46 (Mega)

bg.xcj_motor_backward=motor shield backward
bg.xcj_motor_forward=motor shield forward
bg.xcj_ms_digital_read=Xinchejian digitalRead
bg.xcj_ms_digital_write=Xinchejian digitalWrite
bg.code_line=C++ Code Line

bd.logic=Operators
bd.communication=Communication
bd.codeblocks=C++
#ardublock app labels
problocks.file.suffix=.apb
ardublock.ui.new=New
ardublock.ui.save=Save
ardublock.ui.saveAs=Save As
ardublock.ui.load=Open
ardublock.ui.upload=Upload
ardublock.ui.verify=Verify
ardublock.ui.clone=Clone
ardublock.ui.add_comment=Add Comment
ardublock.ui.delete_comment=Delete Comment
ardublock.ui.organize_blocks=Organize all blocks
ardublock.ui.create_refer=create reference
ardublock.ui.aboutButton=About
ardublock.ui.serialMonitor=Serial Monitor
ardublock.ui.saveImage=Save Image

ardublock.error_msg.digital_var_slot=Digital variable slot must take a 'digital variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.number_var_slot=Standard variable slot must take a standard 'Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.long_number_var_slot=Large integer variable slot must take a 'Large Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.double_number_var_slot=variable slot must take a 'Decimal' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.char_var_slot=Char variable slot must take a char variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_var_slot='Array variable' slot must take an 'array variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_size_slot='Array size' slot must take a standard integer constant
ardublock.error_msg.string_var_slot=String variable slot must take a String variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.Digital_pin_slot=Pin# must be a valid digital pin number found on an Arduino Board
ardublock.error_msg.Analog_pin_slot=Pin# must be a valid analog input pin number found on an Arduino Board
ardublock.error_msg.serial_port=Port must be a valid serial port block.
ardublock.error_msg.definition_block=Only C++ Code Blocks are allowed in the 'Declarations' code region.
ardublock.translator.exception.subroutineNameDuplicated=two or more subroutines have the same name!
ardublock.translator.exception.noLoopFound=No loop found!
ardublock.translator.exception.multipleLoopFound=multiple loop block found!
ardublock.translator.exception.socketNull=A required Value, Variable Name or 'Test' is missing.\nHint:: Look for an empty 'socket' in the highlighted block.
ardublock.translator.exception.subroutineNotDeclared=subroutine not declared

message.title.error=Error
message.title.question=Question
message.content.open_unsaved=You have unsaved work which will be lost!\n Do you want to save your work before opening a different ProductivityBlocks program?
message.content.overwrite=Do you want overwrite existing file?
message.file_not_found=File Not Found or Permission Denied
message.question.newfile_on_workspace_changed=You have unsaved work which will be lost!\n Do you want to save your work before starting a new ProductivityBlocks program?
message.question.close_on_workspace_changed=You have unsaved work which may be lost!\n Do you want to save your work before before closing the ProductivityBlocks program?
bc.repeat_times=times
#end ardublock app labels

# Descriptions of all Block

bg.program.description=Main program with loop and setup
bg.program_full.description=Main program with loop and setup, along with 'Declarations' and 'Subprograms' code regions.
bg.loop.description=Main Program loop without setup

bg.scoop_sleep.description=Delay execution of current thread for x milliseconds
bg.scoop_task.description=Multitasking thread with loop and setup
bg.scoop_loop.description=Multitasking thread without setup commands
bg.scoop_pin_event.description=Multitasking thread. Runs commands when an event is detected on a pin.
bg.scoop_event_low.description=event triggered when pin is low
bg.scoop_event_high.description=event triggered when pin is high
bg.scoop_event_falling.description=event triggered when pin is falling
bg.scoop_event_rising.description=event triggered when pin is rising
bg.scoop_event_change.description=event triggered when pin is change 

bg.delay.description=Delay for "milliseconds" indicated. NOTE: 1000 millis = 1 second
bg.if.description=Run the commands if the "test" is true
bg.ifelse.description=Run the first set of commands if the "test" is true, otherwise it will do the second set of commands.
bg.while.description=Run the commands as long as the "test" is true
bg.do_while.description=Run the list of commands. Then, if 'test' is true, keep on repeating it until 'test' is 'false'
bg.repeat_times.description=Repeat a list of commands a number of times.
bg.repeat.description=Repeat a list of commands a number of times. The "index" stores the current number.
bg.break.description=break 
bg.subroutine.description=A list of commands we can call by a single name.\nThey will run only if 'called', see CONTROL menu.
bg.subroutine-ref.description=Run the list of commands in the subroutine called...
bg.delay_microseconds.description=Delay for "microseconds" indicated. NOTE: 1000000 micros = 1 second
bg.pin-read-analog.description=Read analog value from pin. Zero volts = 0. Five volts = 1023
bg.pin-read-digital.description=Read digital value (HIGH or LOW) from pin.
bg.pin-read-digital-pullup.description=Set pin to digital input\nPin will report HIGH if unconnected.
bg.pin-write-digital.description=Set digital pin to HIGH or LOW
bg.pin-toggle.description=toggle digital pin
bg.pin-write-analog.description=Write analog voltage to pin. Eg \n 0 = Zero volts. 255 = five volts.
bg.addition.description=Sum of two numbers
bg.subtraction.description=Difference of two numbers
bg.multiplication.description=Product of two numbers
bg.division.description=Quotient of two numbers
bg.random.description=Generate a random number less than the number
bg.map_common.description=map value from [0, 1023] to [0, 255]
bg.map.description=Map value from "from" range to "to" range
bg.constrain.description=Constrain a number between two values
bg.dummy.description=
bg.greater.description=True if the first number is greater the second number
bg.less.description=True if the first number is less then the second number
bg.equal.description=True if the first number equals to the second number
bg.equal_digital.description=True if the first value equals to the second value
bg.greater_equal.description=True if the first number is greater or equal to the second number
bg.less_equal.description=True if the first number is less or equal to the second number
bg.not_equal.description=True if the first number is not equal to the second number
bg.not_equal_digital.description=True if the first number is not equal to the second number
bg.and.description=True if both of the two conditions are true.
bg.or.description=True if one or both of the two conditions are true.
bg.not.description=The opposite of
bg.equal_poly.description=True if first character is equal to the second character
bg.not_equal_poly.description=True if first character is not equal to the second character
bg.equal_string.description=True if first string is equal to the second string
bg.not_equal_string.description=True if first string is not equal to the second string
bg.string_greater.description= True if first string is  to the second string
bg.string_less.description= True if first string is  to the second string
bg.string_equal.description= True if first string is  to the second string
bg.string_greater_equal.description= True if first string is  to the second string
bg.string_less_equal.description= True if first string is  to the second string
bg.string_not_equal.description= True if first string is  to the second string
bg.string_equals.description=True if first string is  to the second string
bg.string_equalsIgnoreCase.description=True if first string is  to the second string
bg.string_toInt.description=True if a numeric string compared to the number it represents
bg.string_compareTo.description=True if first string is  to the second string
bg.true.description=Boolean True.
bg.false.description=Boolean False.
bg.digital-high.description=Pin HIGH
bg.digital-low.description=Pin LOW
bg.string_equal.description=True if two strings are equal
bg.string_empty.description=True if string is empty
bg.char.description=Character constant
bg.number.description=Standard integer constant.\n32,768 to +32,767
bg.number_long.description=Large integer constant.\n0 to 4,294,967,295
bg.number_double.description='Decimal' number constant. +/- 3.4028235E+38
bg.variable_number.description=Standard integer variable.\n-32,768 to +32,767
bg.pinListDigital_D0.description=List of valid digital pin numbers on various Arduino boards
bg.pinListDigital_D6.description=List of valid digital pin numbers on various Arduino boards
bg.pinListDigital_D8.description=List of valid digital pin numbers on various Arduino boards
bg.pinListDigital_D11.description=List of valid digital pin numbers on various Arduino boards
bg.pinListDigital_D12.description=List of valid digital pin numbers on various Arduino boards
bg.pinListDigital_D13.description=List of valid digital pin numbers on various Arduino boards
bg.pinListAnalog_A0.description=List of valid analog pin numbers on various Arduino boards
bg.pinListAnalogWrite_D3.description=List of valid 'analog write' (PWM) pin numbers on various Arduino boards
bg.variable_number_unsigned_long.description=Large integer variable name
bg.variable_number_double.description='Decimal' variable name
bg.variable_digital.description=Digital variable
bg.variable_string.description=string variable
bg.setter_variable_number.description=Set standard integer variable.\n-32,768 to +32,767
bg.setter_variable_number_unsigned_long.description=Set large integer variable.\n0 to 4,294,967,295
bg.setter_variable_number_double.description=Set 'Decimal' variable.\n +/- 3.4028235E+38
bg.setter_variable_digital.description=Set digital variable.\nHIGH or LOW
bg.variable_vector.description=Get the value of an array member
bg.create_variable_vector.description=Create an array of standard integers.\n-32,768 to +32,767
bg.setter_variable_vector.description=Set the value of an array member
bc.array=Name the array
bg.setter_variable_char.description=Set a character variable
bg.variable_poly.description=Character variable name

bg.message.description=String constant.
bg.glue_sn.description=Glue number to string
bg.glue_sb.description=Glue boolean to string
bg.glue_poly.description=Glue char to string
bg.wire_write.description=Write data via I2C
bg.wire_read.description=Read data from i2c
bg.wire_isread.description=Is last read from I2C success?
bg.eeprom_read.description=Read a byte (0-255) from EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_read.description=Read a byte (0-255) from EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_write.description=Write a byte (0-255) to EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_read_int.description=Read an int (+/- 32,767) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_write_int.description=Write an int (+/- 32,767) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 2 addresses in EEPROM
bg.eeprom_read_long.description=Read a 'long' (0 - 4,294,967,295) from EEPROM. NOTE: DON'T read from consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.eeprom_write_long.description=Write a 'long' (0 - 4,294,967,295) to EEPROM. NOTE: DON'T write to consecutive addresses. Each number consumes 4 addresses in EEPROM
bg.code_line.description=Add a line of C++ code.
bg.glue_msg.description=C++ code.
bg.variable_fake.description=Digital Var				
bg.serial_println.description=Send message via Serial port with a return

bg.itos=To String
bg.itos.description=Convert a number into a string.

bg.btos=To String
bg.btos.description=Convert a boolean into a string.

bg.cpp_variable_number=VAR
bg.cpp_variable_number.description=Reference a numeric variable name (created using C++ code or blocks).

bg.cpp_variable_digital=VAR
bg.cpp_variable_digital.description=Reference a boolean variable name (created using C++ code or blocks).

bg.cpp_variable_string=VAR
bg.cpp_variable_string.description=Reference a string variable name (created using C++ code or blocks).

bg.cpp_variable_char=VAR
bg.cpp_variable_char.description=Reference a character variable name (created using C++ code or blocks).

bc.commands=commands

bg.loop1=loop
bg.loop1.description=loop
bg.loop2=loop
bg.loop2.description=loop
bg.loop3=loop
bg.loop3.description=loop

bc.declarations=Declarations
bg.definition_block=C++ Declarations
bg.definition_block.description=Put C++ Code Blocks into the 'Definitions' section of the program. (This is the code region where functions are prototyped).
bc.subprograms=Subprograms
bg.subprogram_block=Subprograms
bg.subprogram_block.description=Put Raw Code Blocks into the 'Subprograms' section of the program. (This is the code region where functions are defined).
bg.raw_code.description=Inject C++ Code into the program.

bd.SerialMonitor=Serial Monitor

bg.SerialMonitorStart=Monitor Start
bg.SerialMonitorStart.description=Start the Monitor (optionally set the baud rate).

bg.SerialMonitorprintString=Monitor Print String
bg.SerialMonitorprintString.description=Print a String value to the Serial Monitor.

bg.SerialMonitorprintNumber=Monitor Print Number
bg.SerialMonitorprintNumber.description=Print a number to the Serial Monitor.

bg.SerialMonitorprintChar=Monitor Print Character
bg.SerialMonitorprintChar.description=Print a character to the Serial Monitor.

#ARDUINO BLOCKS
bd.Serial=Serial COM

bg.Serial.available=Available
bg.Serial.available.description=Get the number of bytes (characters) available for reading from the serial port. This is data that\u2019s already arrived and stored in the serial receive buffer (which holds 64 bytes).

bg.Serial.availableForWrite=Available For Write
bg.Serial.availableForWrite.description=Get the number of bytes (characters) available for writing in the serial buffer without blocking the write operation.

bg.Serial.begin=Start
bg.Serial.begin.description=Sets the data rate in bits per second (baud) for serial data transmission. An optional second argument configures the data, parity, and stop bits. The default is 8 data bits, no parity, one stop bit.

bg.Serial.end=End
bg.Serial.end.description=Disables serial communication, allowing the RX and TX pins to be used for general input and output. To re-enable serial communication, call Serial.begin().

bg.Serial.find=Find
bg.Serial.find.description=Reads data from the serial buffer until the target is found. The function returns true if target is found, false if it times out.

bg.Serial.flush=Flush
bg.Serial.flush.description=Waits for the transmission of outgoing serial data to complete.

bg.Serial.parseInt=Parse Int
bg.Serial.parseInt.description=Looks for the next valid integer in the incoming serial. The function terminates if it times out (see Serial.setTimeout).

bg.Serial.parseFloat=Parse Float
bg.Serial.parseFloat.description=Returns the first valid floating point number from the Serial buffer. parseFloat() is terminated by the first character that is not a floating point number. The function terminates if it times out (see Serial.setTimeout).

bg.Serial.peek=Peek
bg.Serial.peek.description=Returns the next byte (character) of incoming serial data without removing it from the internal serial buffer. That is, successive calls to peek() will return the same character, as will the next call to read().

bg.Serial.printString=Print String
bg.Serial.printString.description=Print a string value to a serial port.

bg.Serial.printNumber=Print Number
bg.Serial.printNumber.description=Print a number to a serial port in DEC, BIN, HEX or OCT format.

bg.Serial.printNumberBin=Print Number (BIN)
bg.Serial.printNumberBin.description=Print a number to a serial port in DEC, BIN, HEX or OCT format.

bg.Serial.printNumberHex=Print Number (HEX)
bg.Serial.printNumberHex.description=Print a number to a serial port in DEC, BIN, HEX or OCT format.

bg.Serial.printNumberOct=Print Number (OCT)
bg.Serial.printNumberOct.description=Print a number to a serial port in DEC, BIN, HEX or OCT format.

bg.Serial.printChar=Print Character
bg.Serial.printChar.description=Print a character value to a serial port.

bg.Serial.printBool=Print Boolean
bg.Serial.printBool.description=Print a boolean value to a serial port.

bg.Serial.read=Read 
bg.Serial.read.description=Reads incoming serial data.

bg.Serial.readString=Read String
bg.Serial.readString.description=Reads characters from the serial buffer into a String. The function terminates if it times out (see setTimeout).

bg.Serial.setTimeout=Set Timeout
bg.Serial.setTimeout.description=sets the maximum milliseconds to wait for serial data. It defaults to 1000 milliseconds.

bg.serialEvent=Serial Event
bg.serialEvent.description=Called when data is available. Use Serial.read() to capture this data.

bg.Serial_is_open=Serial
bg.Serial_is_open.description=Indicates if the specified Serial port is ready.

bg.SKIP_ALL=SKIP_ALL
bg.SKIP_ALL.description=Flag for Stream and Serial parseInt/parseFloat

bg.SKIP_NONE=SKIP_NONE
bg.SKIP_NONE.description=Flag for Stream and Serial parseInt/parseFloat

bg.SKIP_WHITESPACE=SKIP_WHITESPACE
bg.SKIP_WHITESPACE.description=Flag for Stream and Serial parseInt/parseFloat

bg.SERIAL_8N1=SERIAL_8N1
bg.SERIAL_8N1.description=Serial data + parity + stop bits configuration

bg.SERIAL_5N1=SERIAL_5N1
bg.SERIAL_5N1.description=Serial data + parity + stop bits configuration

bg.SERIAL_6N1=SERIAL_6N1
bg.SERIAL_6N1.description=Serial data + parity + stop bits configuration

bg.SERIAL_7N1=SERIAL_7N1
bg.SERIAL_7N1.description=Serial data + parity + stop bits configuration

bg.SERIAL_8N2=SERIAL_8N2
bg.SERIAL_8N2.description=Serial data + parity + stop bits configuration

bg.SERIAL_5N2=SERIAL_5N2
bg.SERIAL_5N2.description=Serial data + parity + stop bits configuration

bg.SERIAL_6N2=SERIAL_6N2
bg.SERIAL_6N2.description=Serial data + parity + stop bits configuration

bg.SERIAL_7N2=SERIAL_7N2
bg.SERIAL_7N2.description=Serial data + parity + stop bits configuration

bg.SERIAL_8E1=SERIAL_8E1
bg.SERIAL_8E1.description=Serial data + parity + stop bits configuration

bg.SERIAL_5E1=SERIAL_5E1
bg.SERIAL_5E1.description=Serial data + parity + stop bits configuration

bg.SERIAL_6E1=SERIAL_6E1
bg.SERIAL_6E1.description=Serial data + parity + stop bits configuration

bg.SERIAL_7E1=SERIAL_7E1
bg.SERIAL_7E1.description=Serial data + parity + stop bits configuration

bg.SERIAL_8E2=SERIAL_8E2
bg.SERIAL_8E2.description=Serial data + parity + stop bits configuration

bg.SERIAL_5E2=SERIAL_5E2
bg.SERIAL_5E2.description=Serial data + parity + stop bits configuration

bg.SERIAL_6E2=SERIAL_6E2
bg.SERIAL_6E2.description=Serial data + parity + stop bits configuration

bg.SERIAL_7E2=SERIAL_7E2
bg.SERIAL_7E2.description=Serial data + parity + stop bits configuration

bg.SERIAL_8O1=SERIAL_8O1
bg.SERIAL_8O1.description=Serial data + parity + stop bits configuration

bg.SERIAL_5O1=SERIAL_5O1
bg.SERIAL_5O1.description=Serial data + parity + stop bits configuration

bg.SERIAL_6O1=SERIAL_6O1
bg.SERIAL_6O1.description=Serial data + parity + stop bits configuration

bg.SERIAL_7O1=SERIAL_7O1
bg.SERIAL_7O1.description=Serial data + parity + stop bits configuration

bg.SERIAL_8O2=SERIAL_8O2
bg.SERIAL_8O2.description=Serial data + parity + stop bits configuration

bg.SERIAL_5O2=SERIAL_5O2
bg.SERIAL_5O2.description=Serial data + parity + stop bits configuration

bg.SERIAL_6O2=SERIAL_6O2
bg.SERIAL_6O2.description=Serial data + parity + stop bits configuration

bg.SERIAL_7O2=SERIAL_7O2
bg.SERIAL_7O2.description=Serial data + parity + stop bits configuration

bg.SerialPort0=Monitor
bg.SerialPort0.description=USB Serial Port.

bg.SerialPort1=1
bg.SerialPort1.description=GPIO Serial Port (See documentation for your board).

bg.SerialPort2=2
bg.SerialPort2.description=GPIO Serial Port (See documentation for your board).

bg.SerialPort3=3
bg.SerialPort3.description=GPIO Serial Port (See documentation for your board).

#ADC BLOCKS
bd.P1_init=P1 Setup
bd.P1_CPU=P1AM CPU
bd.P1_PWM=P1 PWM
bd.P1_IO=P1 I/O
bd.P1_config=P1 Module Config
bd.HSC=P1 HSC
bd.HSC_Channel=P1 HSC Channel

bg.writeDiscrete=Set Points
bg.writeDiscrete.description=Assign all output points of a DO module with the bits of the input integer.

bg.writeDiscreteBit=Set Point
bg.writeDiscreteBit.description=Write the state of the specified output point (for DO modules).

bg.readDiscrete=Get Points
bg.readDiscrete.description=Returns an integer whose bits contain all input points of a DI module.

bg.readDiscreteBoolean=Get Point
bg.readDiscreteBoolean.description=Read the state of the specified input point (for DI modules).

bg.P1init=Initialize
bg.P1init.description=Starts P1 module enumeration process. Returns 0 if enumeration is in progress, and returns the number of P1 modules if enumeration is complete.

bg.P1Autoinit=Initialize P1 Modules
bg.P1Autoinit.description=Initialize P1 Modules by waiting in a loop until P1 module discovery is complete.

bg.blink=Blink
bg.blink.description=Make the P1AM-CPU blink on and off.

bg.P1_blink=P1 Module Blink
bg.P1_blink.description=Make a point on a P1 discrete module blink on and off. 

bg.rollCall=Roll Call
bg.rollCall.description=Pass in an array of module names to check if current modules in base match.

bg.getFwVersion=Print FW Version
bg.getFwVersion.description=Prints the P1AM FW version to the serial monitor (serial must be activated before calling getFwVersion).

bg.writeAnalog=Set Analog
bg.writeAnalog.description=Write Analog Output

bg.readAnalog=Get Analog
bg.readAnalog.description=Read Analog Input

bg.readTemperature=Read Temperature
bg.readTemperature.description=Read Analog Temperature Input

bg.writePWM=Write PWM
bg.writePWM.description=Write Frequency and Duty Cycle to the Channel of a P1-PWM Module

bg.writePWMDuty=Write PWM Duty Cycle
bg.writePWMDuty.description=Write Duty Cycle to the Channel of a P1-PWM Module

bg.writePWMFreq=Write PWM Frequency
bg.writePWMFreq.description=Write Frequency to the Channel of a P1-PWM Module

bg.writePWMDir=Write PWM Dir
bg.writePWMDir.description=Set the DIR state of a Channel of a P1-PWM Module

bg.printModules=Print Modules
bg.printModules.description=Print P1 Module Discovery to the Serial Monitor

bg.readStatus=Read Status
bg.readStatus.description=Read P1 Module Status Byte

bg.configWD=Configure Watchdog
bg.configWD.description=Configure P1 Watchdog settings.

bg.startWD=Start Watchdog
bg.startWD.description=Start P1 Watchdog.

bg.stopWD=Stop Watchdog
bg.stopWD.description=Stop P1 Watchdog.

bg.petWD=Pet Watchdog
bg.petWD.description=Pet P1 Watchdog.

bg.RSS=CPU_SWITCH_PIN
bg.RSS.description=The P1AM switch pin number.

bg.LED=CPU_LED_PIN
bg.LED.description=The P1AM LED pin number.

bg.SDCS=CPU_SDCS_PIN
bg.SDCS.description=The P1AM SD Card pin number.

bg.AD_chan_config=Configure P1-AD
bg.AD_chan_config.description=Enable a number of channels on a P1-AD analog input module.

bg._04AD_config=Configure P1-04AD
bg._04AD_config.description=Set the P1-04AD module configuration.

bg._04THM_config=Configure P1-04THM
bg._04THM_config.description=Set the P1-04THM module configuration.

bg._04NTC_config=Configure P1-04NTC
bg._04NTC_config.description=Set the module configuration for P1-04NTC module

bg._04RTD_config=Configure P1-04RTD
bg._04RTD_config.description=Set the module configuration for P1-04RTD module.

bg._4ADL2DAL_config=Configure P1-4ADL2DAL
bg._4ADL2DAL_config.description=Configure a P1-4ADL2DAL analog combo module.  

bg.PWM_config=Configure P1-PWM
bg.PWM_config.description=Configure a P1-PWM pulse width modulated analog module.

bg.runstopswitch=CPU Switch
bg.runstopswitch.description=Returns a boolean for the P1-AM CPU switch position

bg.writeled=Set CPU LED
bg.writeled.description=Set the P1-AM CPU LED to the value of a boolean input.

bg.LSB_min_C=Low Side Burnout (min scale)/Temp in \u00BA C
bg.LSB_min_C.description=Temperature module configuration option.

bg.LSB_max_C=High Side Burnout (max scale)/Temp in \u00BA C
bg.LSB_max_C.description=Temperature module configuration option.

bg.LSB_min_F=Low Side Burnout (min scale)/Temp in \u00BA F
bg.LSB_min_F.description=Temperature module configuration option.

bg.LSB_max_F=High Side Burnout (max scale)/Temp in \u00BA F
bg.LSB_max_F.description=Temperature module configuration option.

bg.Digital_Filter_1=33Hz/16bit/61ms
bg.Digital_Filter_1.description=Temperature module configuration option.

bg.Digital_Filter_2=470Hz/14bit/4ms
bg.Digital_Filter_2.description=Temperature module configuration option.

bg._04AD_Range_1=\u00B1 10V
bg._04AD_Range_1.description=Temperature module configuration option.

bg._04AD_Range_2=0-10V
bg._04AD_Range_2.description=Temperature module configuration option.

bg._04AD_Range_3=0-5V
bg._04AD_Range_3.description=Temperature module configuration option.

bg._04AD_Range_4=0-20mA
bg._04AD_Range_4.description=Temperature module configuration option.

bg._04AD_Range_5=\u00B1 5V
bg._04AD_Range_5.description=Temperature module configuration option.

bg.NTC_Range_1=2252
bg.NTC_Range_1.description=Temperature module configuration option.

bg.NTC_Range_2=10K-AN
bg.NTC_Range_2.description=Temperature module configuration option.

bg.NTC_Range_3=10K-CP
bg.NTC_Range_3.description=Temperature module configuration option.

bg.NTC_Range_4=5K
bg.NTC_Range_4.description=Temperature module configuration option.

bg.NTC_Range_5=3K
bg.NTC_Range_5.description=Temperature module configuration option.

bg.NTC_Range_6=1.8K
bg.NTC_Range_6.description=Temperature module configuration option.

bg.THM_Range_1=J
bg.THM_Range_1.description=Temperature module configuration option.

bg.THM_Range_2=K
bg.THM_Range_2.description=Temperature module configuration option.

bg.THM_Range_3=E
bg.THM_Range_3.description=Temperature module configuration option.

bg.THM_Range_4=R
bg.THM_Range_4.description=Temperature module configuration option.

bg.THM_Range_5=S
bg.THM_Range_5.description=Temperature module configuration option.

bg.THM_Range_6=T
bg.THM_Range_6.description=Temperature module configuration option.

bg.THM_Range_7=B
bg.THM_Range_7.description=Temperature module configuration option.

bg.THM_Range_8=N
bg.THM_Range_8.description=Temperature module configuration option.

bg.THM_Range_9=C
bg.THM_Range_9.description=Temperature module configuration option.

bg.THM_Range_10=0-39mV
bg.THM_Range_10.description=Temperature module configuration option.

bg.THM_Range_11=\u00B1 39mV
bg.THM_Range_11.description=Temperature module configuration option.

bg.THM_Range_12=\u00B1 78mV
bg.THM_Range_12.description=Temperature module configuration option.

bg.THM_Range_13=0-156mV
bg.THM_Range_13.description=Temperature module configuration option.

bg.THM_Range_14=\u00B1 156mV
bg.THM_Range_14.description=Temperature module configuration option.

bg.THM_Range_15=0-1.25V
bg.THM_Range_15.description=Temperature module configuration option.

bg.RTD_Range_1=jPt100
bg.RTD_Range_1.description=Temperature module configuration option.

bg.RTD_Range_2=Pt100
bg.RTD_Range_2.description=Temperature module configuration option.

bg.RTD_Range_3=Pt1000
bg.RTD_Range_3.description=Temperature module configuration option.

bg.RTD_Range_4=10\u03A9 Cu
bg.RTD_Range_4.description=Temperature module configuration option.

bg.RTD_Range_5=25\u03A9 Cu
bg.RTD_Range_5.description=Temperature module configuration option.

bg.RTD_Range_6=120\u03A9 Ni
bg.RTD_Range_6.description=Temperature module configuration option.

bg.RTD_Range_7=0-193.3125\u03A9
bg.RTD_Range_7.description=Temperature module configuration option.

bg.RTD_Range_8=0-10K\u03A9
bg.RTD_Range_8.description=Temperature module configuration option.

bg.RTD_Range_9=0-6.25K\u03A9
bg.RTD_Range_9.description=Temperature module configuration option.

bg.RTD_Range_10=0-3.125K\u03A9
bg.RTD_Range_10.description=Temperature module configuration option.

bg.RTD_Range_11=0-1.563K\u03A9
bg.RTD_Range_11.description=Temperature module configuration option.

bg.RTD_Range_12=0-781.25\u03A9
bg.RTD_Range_12.description=Temperature module configuration option.

bg.RTD_Range_13=0-390.625\u03A9
bg.RTD_Range_13.description=Temperature module configuration option.

bg.PWM_Range_1=PWM
bg.PWM_Range_1.description=Temperature module configuration option.

bg.PWM_Range_2=DIR
bg.PWM_Range_2.description=Temperature module configuration option.

bg.Chan_1_4=Channel 1
bg.Chan_1_4.description=Enable channel 1.

bg.Chan_2_4=Channels 1-2
bg.Chan_2_4.description=Enable channels 1 and 2.

bg.Chan_3_4=Channels 1-3
bg.Chan_3_4.description=Enable channels 1 through 3.

bg.Chan_4_4=Channels 1-4
bg.Chan_4_4.description=Enable channels 1 through 4.

bg.Chan_1_8=Channel 1
bg.Chan_1_8.description=Enable channel 1.

bg.Chan_2_8=Channels 1-2
bg.Chan_2_8.description=Enable channels 1 and 2.

bg.Chan_3_8=Channels 1-3
bg.Chan_3_8.description=Enable channels 1 through 3.

bg.Chan_4_8=Channels 1-4
bg.Chan_4_8.description=Enable channels 1 through 4.

bg.Chan_5_8=Channels 1-5
bg.Chan_5_8.description=Enable channels 1 through 5.

bg.Chan_6_8=Channels 1-6
bg.Chan_6_8.description=Enable channels 1 through 6.

bg.Chan_7_8=Channels 1-7
bg.Chan_7_8.description=Enable channels 1 through 7.

bg.Chan_8_8=Channels 1-8
bg.Chan_8_8.description=Enable channels 1 through 8.

bg.P1_HSC=HSC Object
bg.P1_HSC.description=Object that contains functions and properties that relate to the module as a whole. Each P1-02HSC module will require it's own object. Sets default channel settings for P1_HSC_Channel members CNT1 and CNT2.

bg.P1_HSC_Module_Constructor=P1 HSC Module
bg.P1_HSC_Module_Constructor.description=Creates a P1_HSC_Module object.

bg.P1_HSC_Module.configureChannels=Configure Channels
bg.P1_HSC_Module.configureChannels.description=Initialize the P1-02HSC module. Writes current settings for both channels to the module and sets position to 0.

bg.P1_HSC_Module.configureChannels_chan1_chan2=Configure Channels
bg.P1_HSC_Module.configureChannels_chan1_chan2.description=Initialize the P1-02HSC module. Writes current settings for both channels to the module and sets position to 0.

bg.P1_HSC_Module.getChannel=Get Channel
bg.P1_HSC_Module.getChannel.description=Return the specified P1_HSC_Channel member of the P1_HSC_Module object.

ardublock.error_msg.getChanel=Input must be a valid CNT1 or CNT2 block.

bg.P1_HSC_Module.channel1=CNT1
bg.P1_HSC_Module.channel1.description=Channel 1

bg.P1_HSC_Module.channel2=CNT2
bg.P1_HSC_Module.channel2.description=Channel 2

bg.P1_HSC_Module.readInputs=Read Inputs
bg.P1_HSC_Module.readInputs.description=Reads the 8 inputs of the P1-02HSC and returns the value as a bitmapped value. Additionally updates the bool parameters for	each input that reside within the P1_HSC_Module object.

bg.P1_HSC_Channel=HSC Channel Object
bg.P1_HSC_Channel.description=Object that contains functions and properties for each individual channel of the P1-02HSC. The P1_HSC_Module object has 2 default instances of this class: CNT1 and CNT2. Additional class objects may be defined to allow for more descriptive naming.

bg.P1_HSC_Channel_Constructor=P1 HSC Channel
bg.P1_HSC_Channel_Constructor.description=Creates a P1_HSC_Channel object.

bg.P1_HSC_Channel.readPosition=Read Position
bg.P1_HSC_Channel.readPosition.description=Reads the current position of the channel in counts. Value is a 32 bit unsigned integer and will roll under/over at 0xFFFFFFFF

bg.P1_HSC_Channel.setPosition=Set Position
bg.P1_HSC_Channel.setPosition.description=Sets the current position of a channel to a specified value.

bg.P1_HSC_Channel.readAlerts=Read Alerts
bg.P1_HSC_Channel.readAlerts.description=Returns the alert status bit for the channel specified.

bg.P1_HSC_Channel.readRollOver=Read RollOver
bg.P1_HSC_Channel.readRollOver.description=Function to use when polling for a rollover event. This flag will only trigger when using the rotary encoder setting. The rollover will not be counted by this function and it must be polled continuously polled to see each individual event

bg.P1_HSC_Channel.readInputs=Read Inputs
bg.P1_HSC_Channel.readInputs.description=Reads the 4 inputs of the P1-02HSC channel selected and returns the value as a bitmapped value. Each counter has an A,B,Z, and IN input.

bg.P1_HSC_Channel.setZResetValue=Set ZReset Value
bg.P1_HSC_Channel.setZResetValue.description=Sets the value to reset the position to when Z-input reset(resetWithZ) is enabled for the channel. This function does not reset the value, it still must be triggered by the Z input

bg.P1_HSC_Channel.setRolloverPosition=Set Rollover Position
bg.P1_HSC_Channel.setRolloverPosition.description=Set rotary rollover position for channel. This setting will only work when using the rotary encoder setting.				
				
bg.P1_HSC_Channel_enum1=CH1
bg.P1_HSC_Channel_enum1.description=P1 HSC Channel 1

bg.P1_HSC_Channel_enum2=CH2
bg.P1_HSC_Channel_enum2.description=P1 HSC Channel 2

bg.P1_HSC_Channel.getisRotary=get isRotary
bg.P1_HSC_Channel.getisRotary.description=get the isRotary field of P1_HSC_Channel object.

bg.P1_HSC_Channel.getenableZReset=get enableZReset
bg.P1_HSC_Channel.getenableZReset.description=get the enableZReset field of P1_HSC_Channel object.

bg.P1_HSC_Channel.getpolarity=get polarity
bg.P1_HSC_Channel.getpolarity.description=get the polarity field of P1_HSC_Channel object.

bg.P1_HSC_Channel.getinhibitOn=get inhibitOn
bg.P1_HSC_Channel.getinhibitOn.description=get the inhibitOn field of P1_HSC_Channel object.

bg.P1_HSC_Channel.getmode=get mode
bg.P1_HSC_Channel.getmode.description=get the mode field of P1_HSC_Channel object.

bg.P1_HSC_Channel.setisRotary=set isRotary
bg.P1_HSC_Channel.setisRotary.description=set the isRotary field of P1_HSC_Channel object.

bg.P1_HSC_Channel.setenableZReset=set enableZReset
bg.P1_HSC_Channel.setenableZReset.description=set the enableZReset field of P1_HSC_Channel object.

bg.P1_HSC_Channel.setpolarity=set polarity
bg.P1_HSC_Channel.setpolarity.description=set the polarity field of P1_HSC_Channel object.

bg.P1_HSC_Channel.setinhibitOn=set inhibitOn
bg.P1_HSC_Channel.setinhibitOn.description=set the inhibitOn field of P1_HSC_Channel object.

bg.P1_HSC_Channel.setmode=set mode
bg.P1_HSC_Channel.setmode.description=set the mode field of P1_HSC_Channel object.

bg.P1_HSC_Channel.stepDirection=stepDirection
bg.P1_HSC_Channel.stepDirection.description=Macro describing the HSC channel mode.

bg.P1_HSC_Channel.quad4x=quad4x
bg.P1_HSC_Channel.quad4x.description=Macro describing the HSC channel mode.

bg.P1_HSC_Channel.quad1x=quad1x
bg.P1_HSC_Channel.quad1x.description=Macro describing the HSC channel mode.

bg.P1_program=Program
bg.P1_program.description=Create a program with a 'setup' and a 'loop'. Choose whether to use P1 Modules.
bc.loop_condition=if
bd.time=Time

bd.comments=Comments
bg.code_comment=C++ Comment
bg.comment=Comment
bg.comment2=Comment
bg.comment3=Comment
bg.comment4=Comment
bg.code_comment.description=Outputs a C++ comment line.
bg.comment.description=Used to document the block program (outputs a C++ comment line).
bg.comment2.description=Used to document the block program (outputs a C++ comment line).
bg.comment3.description=Used to document the block program (outputs a C++ comment line).
bg.comment4.description=Used to document the block program (outputs a C++ comment line).

bg.spacer.description=Add spacing between blocks in your block program.
bg.spacer=
bg.spacer2=
bg.spacer2.description=Add spacing between blocks in your block program.

problocks.ui.version=1.0.0.18
problocks.ui.P1AM_Version=V1.0.3
problocks.p1_library_link=https://github.com/facts-engineering/P1AM
